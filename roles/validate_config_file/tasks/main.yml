---

- name: Get config file
  command: cat {{ config_file_name }}
  check_mode: no
  register: config_file_output

- name: Create map from string
  set_fact:
    config_file_map: "{{ dict(_keys|zip(_vals)) }}"
  vars:
    _arr: "{{ config_file_output.stdout.split('\n')|map('trim')|select()|list }}"
    _keys: "{{ _arr|map('regex_replace', '^(.*?)=(.*)$', '\\1')|map('trim')|list }}"
    _vals: "{{ _arr|map('regex_replace', '^(.*?)=(.*)$', '\\2')|map('trim')|list }}"
  failed_when: config_file_map.PRIVATE_KEY is undefined


- name: Get ethkey info with error handling
  shell: "./ethkey info {{ config_file_map.PRIVATE_KEY }}"
  args:
    chdir: "{{ role_path }}/files/"
  register: ethkey_info
  failed_when: ethkey_info.rc != 0
  changed_when: false

- name: Extract public address from ethkey info
  set_fact:
    address: "{{ ethkey_info.stdout.split('address:')[-1].strip() }}"


- name: Print NETWORK environment variable
  debug:
    msg: "NETWORK environment variable value is {{ lookup('ansible.builtin.env', 'NETWORK') }}"


- name: Define gas balance request for each network
  uri:
    url: "{{ network.rpc_url }}"
    method: POST
    headers:
      Content-Type: "application/json"
    body_format: json
    body: >
      {
        "method": "eth_getBalance",
        "params": ["{{ address }}", "latest"],
        "id": 1,
        "jsonrpc": "2.0"
      }
  register: balance_results
  retries: 64
  delay: 3
  loop: "{{ networks }}"
  loop_control:
    loop_var: network
    label: "{{ network.shortname }} using RPC {{ network.rpc_url }} for {{ address }}"
  tags: rpc_balance

- name: Pair networks with their balance results
  set_fact:
    network_balances: "{{ network_balances | default([]) + [ { 
      'network': item.0, 
      'balance_hex': item.1.json.result, 
      'balance_decimal': item.1.json.result | int(base=16) 
    } ] }}"
  loop: "{{ networks | zip(balance_results.results) | list }}"
  loop_control:
    loop_var: item
    label: "{{ item.0.shortname }}"
  tags: rpc_balance


- name: Set fact for networks with enough gas
  set_fact:
    networks_with_enough_gas: "{{ networks_with_enough_gas | default([]) + [ item.network ] }}"
  when: (item.balance_decimal | int(16)) >= item.network.minimum_gas_at_start
  loop: "{{ network_balances }}"
  loop_control:
    loop_var: item
  tags: validate


- name: Set fact for networks without enough gas
  set_fact:
    networks_without_enough_gas: "{{ networks_without_enough_gas | default([]) + [ item.network ] }}"
  when: item.balance_decimal < item.network.minimum_gas_at_start
  loop: "{{ network_balances }}"
  loop_control:
    loop_var: item
  tags: validate


- name: Display networks without enough gas
  debug:
    msg: "Address {{ address }} does not hold enough gas on {{ network.name }}. {{ network.description }}"
  loop: "{{ networks_without_enough_gas }}"
  loop_control:
    loop_var: network
    label: "{{ network.shortname }}"
  tags: validate

- name: Fail if no networks have enough gas
  fail:
    msg: "The configured wallet does not hold the minimum gas network for any configured network."
  when: networks_with_enough_gas is not defined or networks_with_enough_gas | length == 0
  tags: validate

- meta: end_play
  when: networks_with_enough_gas is not defined or networks_with_enough_gas | length == 0
