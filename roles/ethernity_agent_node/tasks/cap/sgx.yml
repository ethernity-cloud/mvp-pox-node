- name: SGX | check isgx driver
  shell: ls /dev/ | grep isgx
  register: isgx_driver
  changed_when: false
  failed_when: false

- name: SGX | check sgx_enclave driver
  shell: ls /dev/ | grep sgx_enclave
  register: sgx_enclave_driver
  changed_when: false
  failed_when: false

- name: SGX | remove isgx driver
  script: ubuntu/etny-node-isgx-removal-tool.sh
  ignore_errors: true
  when: "isgx_driver.rc == 0 and sgx_enclave_driver.rc == 0"

- name: SGX | install correct driver
  script: ubuntu/etny-node-provision-sgx.sh
  ignore_errors: true
  when: "sgx_enclave_driver.rc != 0"

- name: SGX | build sgx_enable
  shell: make all -C sgx/

- name: SGX | run sgx_enable
  shell: sgx/sgx_enable
  register: sgx_register

- name: SGX | result
  debug:
    msg: '{{ sgx_register.stdout }}'

- name: SGX | check reboot
  when: "('Software enable has been set.' in sgx_register.stdout) or ('The software enable has been performed on this system' in sgx_register.stdout)"
  debug:
    msg: "The software enabling procedure completed successfully."
- name: SGX | reboot
  when: "('Software enable has been set.' in sgx_register.stdout) or ('The software enable has been performed on this system' in sgx_register.stdout)"
  copy:
    content: "yes"
    dest: /tmp/reboot
    mode: '0666'
- name: SGX | reboot
  when: "('Software enable has been set.' in sgx_register.stdout) or ('The software enable has been performed on this system' in sgx_register.stdout)"
  meta: end_play

- name: SGX | get EPC size
  shell: sudo utils/linux/test-sgx | grep "size of EPC section in Processor Reserved Memory" | sed 's/.*Memory, \(.*\) M/\1/' | grep -v "^0$" | sort -nr | head -1
  register: epc_size_output
  changed_when: false
- name: SGX | EPC size
  debug:
    msg: "EPC size is {{ epc_size_output.stdout }} M"
  when: epc_size_output.stdout | length > 0
- name: SGX | check EPC size
  fail:
    msg: "EPC size for SGX is too low"
  when: epc_size_output.stdout|int < 64
- name: SGX | version
  shell: sudo utils/linux/test-sgx | awk '/sgx 1 supported/{sgx1=$NF} /sgx 2 supported/{sgx2=$NF} END {if (sgx1==1 && sgx2==0) {print "SGX version 1"} else if (sgx2==1) {print "SGX version 2"} else {print "SGX not available"}}'
  register: sgx_version_output
  changed_when: false
- name: SGX | version
  debug:
    msg: "{{ sgx_version_output.stdout }}"
