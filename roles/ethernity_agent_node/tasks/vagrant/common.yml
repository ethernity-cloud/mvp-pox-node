---
- name: Check installed Vagrant plugins
  command: vagrant plugin list
  register: plugin_list_output
  changed_when: false
  ignore_errors: true
  failed_when: false
  no_log: true
- name: Print Vagrant plugins
  debug:
    var: plugin_list_output.stdout_lines
  when: plugin_list_output is succeeded
- name: Repair Vagrant plugins
  command: sudo vagrant plugin repair
  changed_when: false
  when: plugin_list_output is failed
  register: plugin_repair_result
  ignore_errors: true
  failed_when: false
  no_log: true
- name: Remove and reinstall Vagrant plugins
  command: sudo vagrant plugin expunge --force
  changed_when: false
  when: plugin_repair_result is failed
- name: Install Vagrant plugins
  command: "vagrant plugin install {{ item.name }} --plugin-version {{ item.version }}"
  loop: "{{ vagrant_plugins }}"
  when: "(item.name + ' (' + item.version|string + ', global)') not in plugin_list_output.stdout_lines"
- name: vagrant - get VM name
  shell: virsh list --name --all
  register: vagrant_vm_name
- name: vagrant - unset VM vars
  shell: virsh managedsave-remove {{ vagrant_vm_name.stdout }}  && virsh undefine {{ vagrant_vm_name.stdout }}
  when: vagrant_vm_name.stdout != ''
- name: vagrant - cleanup VM
  shell: vagrant destroy -f
- name: vagrant - provision VM
  shell: vagrant up --provider=libvirt
