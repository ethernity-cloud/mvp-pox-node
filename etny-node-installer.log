2024-05-21 08:41:40,472 p=4017696 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 08:41:40,497 p=4017696 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 08:41:41,848 p=4017696 u=root n=ansible | ok: [localhost]
2024-05-21 08:41:41,859 p=4017696 u=root n=ansible | TASK [Сheck config file] ******************************************************************************************************************************************************
2024-05-21 08:41:42,212 p=4017696 u=root n=ansible | ok: [localhost]
2024-05-21 08:41:42,221 p=4017696 u=root n=ansible | TASK [Config file does not exist] *********************************************************************************************************************************************
2024-05-21 08:41:42,239 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,247 p=4017696 u=root n=ansible | TASK [meta] *******************************************************************************************************************************************************************
2024-05-21 08:41:42,259 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,273 p=4017696 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 08:41:42,285 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,295 p=4017696 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 08:41:42,307 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,316 p=4017696 u=root n=ansible | TASK [generate_config_file : Write address to config file] ********************************************************************************************************************
2024-05-21 08:41:42,328 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,337 p=4017696 u=root n=ansible | TASK [generate_config_file : Write private key to config file] ****************************************************************************************************************
2024-05-21 08:41:42,349 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,357 p=4017696 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 08:41:42,368 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,376 p=4017696 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 08:41:42,388 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,396 p=4017696 u=root n=ansible | TASK [generate_config_file : Write result private key to config file] *********************************************************************************************************
2024-05-21 08:41:42,408 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,417 p=4017696 u=root n=ansible | TASK [generate_config_file : Write result address to config file] *************************************************************************************************************
2024-05-21 08:41:42,429 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,437 p=4017696 u=root n=ansible | TASK [generate_config_file : Write TASK_EXECUTION_PRICE to config file] *******************************************************************************************************
2024-05-21 08:41:42,449 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,457 p=4017696 u=root n=ansible | TASK [generate_config_file : Write NETWORK to config file] ********************************************************************************************************************
2024-05-21 08:41:42,469 p=4017696 u=root n=ansible | skipping: [localhost]
2024-05-21 08:41:42,485 p=4017696 u=root n=ansible | TASK [validate_config_file : Get config file] *********************************************************************************************************************************
2024-05-21 08:41:42,782 p=4017696 u=root n=ansible | changed: [localhost]
2024-05-21 08:41:42,791 p=4017696 u=root n=ansible | TASK [validate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 08:41:42,844 p=4017696 u=root n=ansible | ok: [localhost]
2024-05-21 08:41:42,854 p=4017696 u=root n=ansible | TASK [validate_config_file : Defining bloxberg gas balance request] ***********************************************************************************************************
2024-05-21 08:41:43,255 p=4017696 u=root n=ansible |  [ERROR]: User interrupted execution

2024-05-21 08:46:14,283 p=4018192 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 08:46:14,301 p=4018192 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 08:46:14,992 p=4018192 u=root n=ansible |  [ERROR]: User interrupted execution

2024-05-21 08:47:53,539 p=4018376 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 08:47:53,557 p=4018376 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 08:47:54,117 p=4018376 u=root n=ansible |  [ERROR]: User interrupted execution

2024-05-21 08:49:05,759 p=4018529 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 08:49:05,763 p=4018529 u=root n=ansible |  [ERROR]: User interrupted execution

2024-05-21 08:52:00,938 p=4018717 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 08:52:00,955 p=4018717 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 08:52:02,254 p=4018717 u=root n=ansible | ok: [localhost]
2024-05-21 08:52:02,265 p=4018717 u=root n=ansible | TASK [Сheck config file] ******************************************************************************************************************************************************
2024-05-21 08:52:02,672 p=4018717 u=root n=ansible | ok: [localhost]
2024-05-21 08:52:02,680 p=4018717 u=root n=ansible | TASK [Config file does not exist] *********************************************************************************************************************************************
2024-05-21 08:52:02,708 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:02,722 p=4018717 u=root n=ansible | TASK [meta] *******************************************************************************************************************************************************************
2024-05-21 08:52:02,734 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:02,749 p=4018717 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 08:52:02,763 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:02,774 p=4018717 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 08:52:02,789 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:02,803 p=4018717 u=root n=ansible | TASK [generate_config_file : Write address to config file] ********************************************************************************************************************
2024-05-21 08:52:02,823 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:02,839 p=4018717 u=root n=ansible | TASK [generate_config_file : Write private key to config file] ****************************************************************************************************************
2024-05-21 08:52:02,864 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:02,880 p=4018717 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 08:52:02,905 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:02,916 p=4018717 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 08:52:02,936 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:02,951 p=4018717 u=root n=ansible | TASK [generate_config_file : Write result private key to config file] *********************************************************************************************************
2024-05-21 08:52:02,972 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:02,982 p=4018717 u=root n=ansible | TASK [generate_config_file : Write result address to config file] *************************************************************************************************************
2024-05-21 08:52:03,005 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:03,019 p=4018717 u=root n=ansible | TASK [generate_config_file : Write TASK_EXECUTION_PRICE to config file] *******************************************************************************************************
2024-05-21 08:52:03,039 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:03,050 p=4018717 u=root n=ansible | TASK [generate_config_file : Write NETWORK to config file] ********************************************************************************************************************
2024-05-21 08:52:03,072 p=4018717 u=root n=ansible | skipping: [localhost]
2024-05-21 08:52:03,089 p=4018717 u=root n=ansible | TASK [validate_config_file : Get config file] *********************************************************************************************************************************
2024-05-21 08:52:03,459 p=4018717 u=root n=ansible | changed: [localhost]
2024-05-21 08:52:03,469 p=4018717 u=root n=ansible | TASK [validate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 08:52:03,522 p=4018717 u=root n=ansible | ok: [localhost]
2024-05-21 08:52:03,533 p=4018717 u=root n=ansible | TASK [validate_config_file : Defining bloxberg gas balance request] ***********************************************************************************************************
2024-05-21 08:52:04,218 p=4018717 u=root n=ansible | ok: [localhost]
2024-05-21 08:52:04,226 p=4018717 u=root n=ansible | TASK [validate_config_file : Defining polygon gas balance request] ************************************************************************************************************
2024-05-21 08:52:04,691 p=4018717 u=root n=ansible |  [ERROR]: User interrupted execution

2024-05-21 08:52:46,804 p=4019049 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 08:52:46,821 p=4019049 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 08:52:47,494 p=4019049 u=root n=ansible |  [ERROR]: User interrupted execution

2024-05-21 08:58:49,189 p=4019645 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 08:58:49,207 p=4019645 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 08:58:50,431 p=4019645 u=root n=ansible | ok: [localhost]
2024-05-21 08:58:50,439 p=4019645 u=root n=ansible | TASK [Сheck config file] ******************************************************************************************************************************************************
2024-05-21 08:58:50,752 p=4019645 u=root n=ansible | ok: [localhost]
2024-05-21 08:58:50,760 p=4019645 u=root n=ansible | TASK [Config file does not exist] *********************************************************************************************************************************************
2024-05-21 08:58:50,778 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,787 p=4019645 u=root n=ansible | TASK [meta] *******************************************************************************************************************************************************************
2024-05-21 08:58:50,799 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,814 p=4019645 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 08:58:50,826 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,835 p=4019645 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 08:58:50,847 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,855 p=4019645 u=root n=ansible | TASK [generate_config_file : Write address to config file] ********************************************************************************************************************
2024-05-21 08:58:50,867 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,877 p=4019645 u=root n=ansible | TASK [generate_config_file : Write private key to config file] ****************************************************************************************************************
2024-05-21 08:58:50,889 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,898 p=4019645 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 08:58:50,910 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,919 p=4019645 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 08:58:50,931 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,941 p=4019645 u=root n=ansible | TASK [generate_config_file : Write result private key to config file] *********************************************************************************************************
2024-05-21 08:58:50,953 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,961 p=4019645 u=root n=ansible | TASK [generate_config_file : Write result address to config file] *************************************************************************************************************
2024-05-21 08:58:50,973 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:50,982 p=4019645 u=root n=ansible | TASK [generate_config_file : Write TASK_EXECUTION_PRICE to config file] *******************************************************************************************************
2024-05-21 08:58:50,994 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:51,003 p=4019645 u=root n=ansible | TASK [generate_config_file : Write NETWORK to config file] ********************************************************************************************************************
2024-05-21 08:58:51,015 p=4019645 u=root n=ansible | skipping: [localhost]
2024-05-21 08:58:51,031 p=4019645 u=root n=ansible | TASK [validate_config_file : Get config file] *********************************************************************************************************************************
2024-05-21 08:58:51,308 p=4019645 u=root n=ansible | changed: [localhost]
2024-05-21 08:58:51,317 p=4019645 u=root n=ansible | TASK [validate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 08:58:51,364 p=4019645 u=root n=ansible | ok: [localhost]
2024-05-21 08:58:51,373 p=4019645 u=root n=ansible | TASK [validate_config_file : Defining bloxberg gas balance request] ***********************************************************************************************************
2024-05-21 08:58:51,829 p=4019645 u=root n=ansible | fatal: [localhost]: FAILED! => {"changed": false, "msg": "unknown url type: '$DEFAULT_BLOXBERG_RPC'", "status": -1, "url": "$DEFAULT_BLOXBERG_RPC"}
2024-05-21 08:58:51,830 p=4019645 u=root n=ansible | PLAY RECAP ********************************************************************************************************************************************************************
2024-05-21 08:58:51,830 p=4019645 u=root n=ansible | localhost                  : ok=4    changed=1    unreachable=0    failed=1    skipped=11   rescued=0    ignored=0   
2024-05-21 09:09:54,172 p=4021037 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 09:09:54,190 p=4021037 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 09:09:55,571 p=4021037 u=root n=ansible | ok: [localhost]
2024-05-21 09:09:55,579 p=4021037 u=root n=ansible | TASK [Сheck config file] ******************************************************************************************************************************************************
2024-05-21 09:09:55,937 p=4021037 u=root n=ansible | ok: [localhost]
2024-05-21 09:09:55,947 p=4021037 u=root n=ansible | TASK [Config file does not exist] *********************************************************************************************************************************************
2024-05-21 09:09:55,969 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:55,980 p=4021037 u=root n=ansible | TASK [meta] *******************************************************************************************************************************************************************
2024-05-21 09:09:55,992 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,006 p=4021037 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:09:56,023 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,036 p=4021037 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:09:56,053 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,066 p=4021037 u=root n=ansible | TASK [generate_config_file : Write address to config file] ********************************************************************************************************************
2024-05-21 09:09:56,084 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,099 p=4021037 u=root n=ansible | TASK [generate_config_file : Write private key to config file] ****************************************************************************************************************
2024-05-21 09:09:56,124 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,139 p=4021037 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:09:56,164 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,180 p=4021037 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:09:56,205 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,219 p=4021037 u=root n=ansible | TASK [generate_config_file : Write result private key to config file] *********************************************************************************************************
2024-05-21 09:09:56,243 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,253 p=4021037 u=root n=ansible | TASK [generate_config_file : Write result address to config file] *************************************************************************************************************
2024-05-21 09:09:56,273 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,288 p=4021037 u=root n=ansible | TASK [generate_config_file : Write TASK_EXECUTION_PRICE to config file] *******************************************************************************************************
2024-05-21 09:09:56,303 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,320 p=4021037 u=root n=ansible | TASK [generate_config_file : Write NETWORK to config file] ********************************************************************************************************************
2024-05-21 09:09:56,342 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:56,365 p=4021037 u=root n=ansible | TASK [validate_config_file : Get config file] *********************************************************************************************************************************
2024-05-21 09:09:56,676 p=4021037 u=root n=ansible | changed: [localhost]
2024-05-21 09:09:56,685 p=4021037 u=root n=ansible | TASK [validate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:09:56,734 p=4021037 u=root n=ansible | ok: [localhost]
2024-05-21 09:09:56,750 p=4021037 u=root n=ansible | TASK [validate_config_file : Defining bloxberg gas balance request] ***********************************************************************************************************
2024-05-21 09:09:57,611 p=4021037 u=root n=ansible | ok: [localhost]
2024-05-21 09:09:57,620 p=4021037 u=root n=ansible | TASK [validate_config_file : Defining polygon gas balance request] ************************************************************************************************************
2024-05-21 09:09:58,199 p=4021037 u=root n=ansible | ok: [localhost]
2024-05-21 09:09:58,209 p=4021037 u=root n=ansible | TASK [validate_config_file : Defining mumbai gas balance request] *************************************************************************************************************
2024-05-21 09:09:58,791 p=4021037 u=root n=ansible | ok: [localhost]
2024-05-21 09:09:58,799 p=4021037 u=root n=ansible | TASK [validate_config_file : Evaluate bloxberg gas balance message] ***********************************************************************************************************
2024-05-21 09:09:58,828 p=4021037 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x44dd26c2cc76c0"
    }
}
2024-05-21 09:09:58,837 p=4021037 u=root n=ansible | TASK [validate_config_file : Evaluate polygon gas balance message] ************************************************************************************************************
2024-05-21 09:09:58,861 p=4021037 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x2386f26fc10000"
    }
}
2024-05-21 09:09:58,875 p=4021037 u=root n=ansible | TASK [validate_config_file : Evaluate mumbai gas balance message] *************************************************************************************************************
2024-05-21 09:09:58,902 p=4021037 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x2c68af0bb140000"
    }
}
2024-05-21 09:09:58,911 p=4021037 u=root n=ansible | TASK [validate_config_file : Checking gas balance for AUTO] *******************************************************************************************************************
2024-05-21 09:09:58,969 p=4021037 u=root n=ansible | ok: [localhost] => {
    "msg": [
        "Node ADDRESS balance: '0' BERG.",
        "Please get bergs on 0xe9872d8c79C158063360BE13d6b179519F836d2c from https://faucet.bloxberg.org/ and try again.",
        "OR",
        "Node ADDRESS balance: '0' MATIC.",
        "Please sent MATIC to 0xe9872d8c79C158063360BE13d6b179519F836d2c and try again."
    ]
}
2024-05-21 09:09:58,980 p=4021037 u=root n=ansible | TASK [validate_config_file : Checking gas balance for BLOXBERG] ***************************************************************************************************************
2024-05-21 09:09:59,000 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:59,010 p=4021037 u=root n=ansible | TASK [validate_config_file : Checking gas balance for TESTNET] ****************************************************************************************************************
2024-05-21 09:09:59,026 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:59,036 p=4021037 u=root n=ansible | TASK [validate_config_file : Checking gas balance for POLYGON] ****************************************************************************************************************
2024-05-21 09:09:59,053 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:59,061 p=4021037 u=root n=ansible | TASK [validate_config_file : Checking gas balance for MUMBAI] *****************************************************************************************************************
2024-05-21 09:09:59,074 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:59,088 p=4021037 u=root n=ansible | TASK [validate_config_file : meta] ********************************************************************************************************************************************
2024-05-21 09:09:59,102 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:59,123 p=4021037 u=root n=ansible | TASK [uoi-io.libvirt : include_vars] ******************************************************************************************************************************************
2024-05-21 09:09:59,151 p=4021037 u=root n=ansible | ok: [localhost]
2024-05-21 09:09:59,160 p=4021037 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:09:59,177 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:59,189 p=4021037 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:09:59,202 p=4021037 u=root n=ansible | skipping: [localhost]
2024-05-21 09:09:59,210 p=4021037 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:09:59,246 p=4021037 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/uoi-io.libvirt/tasks/install.yml for localhost
2024-05-21 09:09:59,255 p=4021037 u=root n=ansible | TASK [uoi-io.libvirt : Installing libvirt packages] ***************************************************************************************************************************
2024-05-21 09:10:00,468 p=4021037 u=root n=ansible | ok: [localhost] => (item=libvirt-daemon-system)
2024-05-21 09:10:00,478 p=4021037 u=root n=ansible | TASK [uoi-io.libvirt : Enabling and starting libvirtd service] ****************************************************************************************************************
2024-05-21 09:10:00,694 p=4021037 u=root n=ansible |  [ERROR]: User interrupted execution

2024-05-21 09:12:33,274 p=4021540 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 09:12:33,293 p=4021540 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 09:12:34,542 p=4021540 u=root n=ansible | ok: [localhost]
2024-05-21 09:12:34,550 p=4021540 u=root n=ansible | TASK [Сheck config file] ******************************************************************************************************************************************************
2024-05-21 09:12:34,860 p=4021540 u=root n=ansible | ok: [localhost]
2024-05-21 09:12:34,868 p=4021540 u=root n=ansible | TASK [Config file does not exist] *********************************************************************************************************************************************
2024-05-21 09:12:34,889 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:34,898 p=4021540 u=root n=ansible | TASK [meta] *******************************************************************************************************************************************************************
2024-05-21 09:12:34,911 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:34,926 p=4021540 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:12:34,944 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:34,953 p=4021540 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:12:34,971 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:34,980 p=4021540 u=root n=ansible | TASK [generate_config_file : Write address to config file] ********************************************************************************************************************
2024-05-21 09:12:34,993 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:35,003 p=4021540 u=root n=ansible | TASK [generate_config_file : Write private key to config file] ****************************************************************************************************************
2024-05-21 09:12:35,023 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:35,032 p=4021540 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:12:35,049 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:35,058 p=4021540 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:12:35,070 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:35,079 p=4021540 u=root n=ansible | TASK [generate_config_file : Write result private key to config file] *********************************************************************************************************
2024-05-21 09:12:35,091 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:35,100 p=4021540 u=root n=ansible | TASK [generate_config_file : Write result address to config file] *************************************************************************************************************
2024-05-21 09:12:35,113 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:35,123 p=4021540 u=root n=ansible | TASK [generate_config_file : Write TASK_EXECUTION_PRICE to config file] *******************************************************************************************************
2024-05-21 09:12:35,137 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:35,151 p=4021540 u=root n=ansible | TASK [generate_config_file : Write NETWORK to config file] ********************************************************************************************************************
2024-05-21 09:12:35,163 p=4021540 u=root n=ansible | skipping: [localhost]
2024-05-21 09:12:35,183 p=4021540 u=root n=ansible | TASK [validate_config_file : Get config file] *********************************************************************************************************************************
2024-05-21 09:12:35,471 p=4021540 u=root n=ansible | changed: [localhost]
2024-05-21 09:12:35,479 p=4021540 u=root n=ansible | TASK [validate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:12:35,522 p=4021540 u=root n=ansible | ok: [localhost]
2024-05-21 09:12:35,531 p=4021540 u=root n=ansible | TASK [validate_config_file : Defining bloxberg gas balance request] ***********************************************************************************************************
2024-05-21 09:12:36,198 p=4021540 u=root n=ansible | ok: [localhost]
2024-05-21 09:12:36,211 p=4021540 u=root n=ansible | TASK [validate_config_file : Defining polygon gas balance request] ************************************************************************************************************
2024-05-21 09:12:36,774 p=4021540 u=root n=ansible | ok: [localhost]
2024-05-21 09:12:36,784 p=4021540 u=root n=ansible | TASK [validate_config_file : Defining mumbai gas balance request] *************************************************************************************************************
2024-05-21 09:12:37,317 p=4021540 u=root n=ansible | fatal: [localhost]: FAILED! => {"cache_control": "max-age=3600", "cf_ray": "88737220cac53a8c-FRA", "changed": false, "connection": "close", "content_length": "167", "content_security_policy": "upgrade-insecure-requests", "content_type": "text/html", "date": "Tue, 21 May 2024 09:12:37 GMT", "elapsed": 0, "expires": "Tue, 21 May 2024 10:12:37 GMT", "location": "https://rpc-mumbai.polygon.technology", "msg": "Status code was 301 and not [200]: HTTP Error 301: Moved Permanently", "redirected": false, "referrer_policy": "strict-origin-when-cross-origin", "server": "cloudflare", "status": 301, "strict_transport_security": "max-age=63072000; includeSubDomains", "url": "https://rpc-mumbai.matic.today", "vary": "Accept-Encoding", "x_content_type_options": "nosniff", "x_frame_options": "SAMEORIGIN", "x_xss_protection": "0"}
2024-05-21 09:12:37,319 p=4021540 u=root n=ansible | PLAY RECAP ********************************************************************************************************************************************************************
2024-05-21 09:12:37,319 p=4021540 u=root n=ansible | localhost                  : ok=6    changed=1    unreachable=0    failed=1    skipped=11   rescued=0    ignored=0   
2024-05-21 09:16:00,547 p=4021989 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 09:16:00,564 p=4021989 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 09:16:01,820 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:01,828 p=4021989 u=root n=ansible | TASK [Сheck config file] ******************************************************************************************************************************************************
2024-05-21 09:16:02,146 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:02,156 p=4021989 u=root n=ansible | TASK [Config file does not exist] *********************************************************************************************************************************************
2024-05-21 09:16:02,175 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,185 p=4021989 u=root n=ansible | TASK [meta] *******************************************************************************************************************************************************************
2024-05-21 09:16:02,197 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,211 p=4021989 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:16:02,236 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,246 p=4021989 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:16:02,259 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,271 p=4021989 u=root n=ansible | TASK [generate_config_file : Write address to config file] ********************************************************************************************************************
2024-05-21 09:16:02,286 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,300 p=4021989 u=root n=ansible | TASK [generate_config_file : Write private key to config file] ****************************************************************************************************************
2024-05-21 09:16:02,315 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,330 p=4021989 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:16:02,345 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,356 p=4021989 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:16:02,376 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,385 p=4021989 u=root n=ansible | TASK [generate_config_file : Write result private key to config file] *********************************************************************************************************
2024-05-21 09:16:02,408 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,423 p=4021989 u=root n=ansible | TASK [generate_config_file : Write result address to config file] *************************************************************************************************************
2024-05-21 09:16:02,437 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,451 p=4021989 u=root n=ansible | TASK [generate_config_file : Write TASK_EXECUTION_PRICE to config file] *******************************************************************************************************
2024-05-21 09:16:02,474 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,484 p=4021989 u=root n=ansible | TASK [generate_config_file : Write NETWORK to config file] ********************************************************************************************************************
2024-05-21 09:16:02,503 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:02,518 p=4021989 u=root n=ansible | TASK [validate_config_file : Get config file] *********************************************************************************************************************************
2024-05-21 09:16:02,787 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:16:02,796 p=4021989 u=root n=ansible | TASK [validate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:16:02,845 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:02,855 p=4021989 u=root n=ansible | TASK [validate_config_file : Defining bloxberg gas balance request] ***********************************************************************************************************
2024-05-21 09:16:03,581 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:03,591 p=4021989 u=root n=ansible | TASK [validate_config_file : Defining polygon gas balance request] ************************************************************************************************************
2024-05-21 09:16:04,155 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:04,164 p=4021989 u=root n=ansible | TASK [validate_config_file : Defining mumbai gas balance request] *************************************************************************************************************
2024-05-21 09:16:04,686 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:04,694 p=4021989 u=root n=ansible | TASK [validate_config_file : Evaluate bloxberg gas balance message] ***********************************************************************************************************
2024-05-21 09:16:04,717 p=4021989 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x44dd26c2cc76c0"
    }
}
2024-05-21 09:16:04,732 p=4021989 u=root n=ansible | TASK [validate_config_file : Evaluate polygon gas balance message] ************************************************************************************************************
2024-05-21 09:16:04,755 p=4021989 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x2386f26fc10000"
    }
}
2024-05-21 09:16:04,765 p=4021989 u=root n=ansible | TASK [validate_config_file : Evaluate mumbai gas balance message] *************************************************************************************************************
2024-05-21 09:16:04,788 p=4021989 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x2c68af0bb140000"
    }
}
2024-05-21 09:16:04,802 p=4021989 u=root n=ansible | TASK [validate_config_file : Checking gas balance for AUTO] *******************************************************************************************************************
2024-05-21 09:16:04,841 p=4021989 u=root n=ansible | ok: [localhost] => {
    "msg": [
        "Node ADDRESS balance: '0' BERG.",
        "Please get bergs on 0xe9872d8c79C158063360BE13d6b179519F836d2c from https://faucet.bloxberg.org/ and try again.",
        "OR",
        "Node ADDRESS balance: '0' MATIC.",
        "Please sent MATIC to 0xe9872d8c79C158063360BE13d6b179519F836d2c and try again."
    ]
}
2024-05-21 09:16:04,853 p=4021989 u=root n=ansible | TASK [validate_config_file : Checking gas balance for BLOXBERG] ***************************************************************************************************************
2024-05-21 09:16:04,865 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:04,877 p=4021989 u=root n=ansible | TASK [validate_config_file : Checking gas balance for TESTNET] ****************************************************************************************************************
2024-05-21 09:16:04,890 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:04,901 p=4021989 u=root n=ansible | TASK [validate_config_file : Checking gas balance for POLYGON] ****************************************************************************************************************
2024-05-21 09:16:04,913 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:04,921 p=4021989 u=root n=ansible | TASK [validate_config_file : Checking gas balance for MUMBAI] *****************************************************************************************************************
2024-05-21 09:16:04,933 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:04,941 p=4021989 u=root n=ansible | TASK [validate_config_file : meta] ********************************************************************************************************************************************
2024-05-21 09:16:04,953 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:04,968 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : include_vars] ******************************************************************************************************************************************
2024-05-21 09:16:04,988 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:04,997 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:16:05,014 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:05,023 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:16:05,039 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:05,048 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:16:05,070 p=4021989 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/uoi-io.libvirt/tasks/install.yml for localhost
2024-05-21 09:16:05,079 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : Installing libvirt packages] ***************************************************************************************************************************
2024-05-21 09:16:06,183 p=4021989 u=root n=ansible | ok: [localhost] => (item=libvirt-daemon-system)
2024-05-21 09:16:06,193 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : Enabling and starting libvirtd service] ****************************************************************************************************************
2024-05-21 09:16:06,793 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:06,801 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : meta] **************************************************************************************************************************************************
2024-05-21 09:16:06,809 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:16:06,833 p=4021989 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/uoi-io.libvirt/tasks/config.yml for localhost
2024-05-21 09:16:06,842 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : Configuring "/etc/libvirt/libvirtd.conf" file (libvirt)] ***********************************************************************************************
2024-05-21 09:16:07,177 p=4021989 u=root n=ansible | ok: [localhost] => (item={'option': 'listen_tls', 'value': 'listen_tls = 0'})
2024-05-21 09:16:07,350 p=4021989 u=root n=ansible | ok: [localhost] => (item={'option': 'listen_tcp', 'value': 'listen_tcp = 0'})
2024-05-21 09:16:07,360 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : Configuring "/etc/libvirt/qemu.conf" file (QEMU)] ******************************************************************************************************
2024-05-21 09:16:07,546 p=4021989 u=root n=ansible | ok: [localhost] => (item={'option': 'user', 'value': 'user = "+0"'})
2024-05-21 09:16:07,730 p=4021989 u=root n=ansible | ok: [localhost] => (item={'option': 'cgroup_device_acl', 'value': 'cgroup_device_acl = [ "/dev/null", "/dev/full", "/dev/zero", "/dev/random", "/dev/urandom", "/dev/ptmx", "/dev/kvm", "/dev/kqemu", "/dev/rtc", "/dev/hpet", "/dev/sgx_virt", "/dev/sgx_enclave", "/dev/sgx_provision", "/dev/sgx_vepc" ]'})
2024-05-21 09:16:07,740 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : Configuring "/etc/default/libvirtd" file (daemon)] *****************************************************************************************************
2024-05-21 09:16:07,940 p=4021989 u=root n=ansible | ok: [localhost] => (item={'option': 'libvirtd_opts', 'value': 'libvirtd_opts=""'})
2024-05-21 09:16:07,952 p=4021989 u=root n=ansible | TASK [uoi-io.libvirt : meta] **************************************************************************************************************************************************
2024-05-21 09:16:07,968 p=4021989 u=root n=ansible | TASK [install_node : Populate service facts] **********************************************************************************************************************************
2024-05-21 09:16:14,289 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:14,300 p=4021989 u=root n=ansible | TASK [install_node : update apt cache] ****************************************************************************************************************************************
2024-05-21 09:16:16,583 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:16:16,595 p=4021989 u=root n=ansible | TASK [install_node : include_tasks] *******************************************************************************************************************************************
2024-05-21 09:16:16,640 p=4021989 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/install_node/tasks/debian_20.yml for localhost
2024-05-21 09:16:16,655 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | kernel SGX] *******************************************************************************************************************************
2024-05-21 09:16:16,667 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:16,680 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | reboot] ***********************************************************************************************************************************
2024-05-21 09:16:16,691 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:16,704 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | reboot] ***********************************************************************************************************************************
2024-05-21 09:16:16,715 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:16,728 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | exit] *************************************************************************************************************************************
2024-05-21 09:16:16,740 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:16:16,751 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu repo] ********************************************************************************************************************************
2024-05-21 09:16:17,305 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:17,317 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu packages] ****************************************************************************************************************************
2024-05-21 09:16:40,217 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:16:40,235 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant add key] **************************************************************************************************************************
2024-05-21 09:16:41,082 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:41,121 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant repo] *****************************************************************************************************************************
2024-05-21 09:16:41,519 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:41,532 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant install] **************************************************************************************************************************
2024-05-21 09:16:42,452 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:42,465 p=4021989 u=root n=ansible | TASK [install_node : Remove old qemu] *****************************************************************************************************************************************
2024-05-21 09:16:47,917 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:16:47,930 p=4021989 u=root n=ansible | TASK [install_node : Remove unused packages] **********************************************************************************************************************************
2024-05-21 09:16:55,894 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:16:55,907 p=4021989 u=root n=ansible | TASK [install_node : Refresh packages] ****************************************************************************************************************************************
2024-05-21 09:16:58,242 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:58,255 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu repo] ********************************************************************************************************************************
2024-05-21 09:16:58,643 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:16:58,656 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu SGX] *********************************************************************************************************************************
2024-05-21 09:17:01,971 p=4021989 u=root n=ansible | changed: [localhost] => (item=qemu-system-data=1:6.2+dfsg-2ubuntu8~20.04.sav0.etny)
2024-05-21 09:17:05,824 p=4021989 u=root n=ansible | changed: [localhost] => (item=qemu-utils=1:6.2+dfsg-2ubuntu8~20.04.sav0.etny)
2024-05-21 09:17:27,337 p=4021989 u=root n=ansible | changed: [localhost] => (item=qemu-system-common=1:6.2+dfsg-2ubuntu8~20.04.sav0.etny)
2024-05-21 09:17:32,593 p=4021989 u=root n=ansible | changed: [localhost] => (item=qemu-system-x86=1:6.2+dfsg-2ubuntu8~20.04.sav0.etny)
2024-05-21 09:17:32,610 p=4021989 u=root n=ansible | TASK [install_node : Installing qemu-utils] ***********************************************************************************************************************************
2024-05-21 09:17:33,519 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:17:33,532 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant-libvirt packages] *****************************************************************************************************************
2024-05-21 09:17:34,441 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:17:34,453 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant template] *************************************************************************************************************************
2024-05-21 09:17:34,908 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:17:34,930 p=4021989 u=root n=ansible | TASK [install_node : Check if isgx driver is installed] ***********************************************************************************************************************
2024-05-21 09:17:35,111 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:17:35,123 p=4021989 u=root n=ansible | TASK [install_node : Check if sgx_enclave driver is installed] ****************************************************************************************************************
2024-05-21 09:17:35,306 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:17:35,320 p=4021989 u=root n=ansible | TASK [install_node : Run script if both drivers are found] ********************************************************************************************************************
2024-05-21 09:17:35,332 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:17:35,345 p=4021989 u=root n=ansible | TASK [install_node : Run script if sgx_enclave drivers are not installed] *****************************************************************************************************
2024-05-21 09:17:35,357 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:17:35,371 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | enable_sgx dependencies] ******************************************************************************************************************
2024-05-21 09:17:36,277 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:17:36,290 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | build enable_sgx] *************************************************************************************************************************
2024-05-21 09:17:36,778 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:17:36,790 p=4021989 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | run enable_sgx] ***************************************************************************************************************************
2024-05-21 09:17:36,982 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:17:36,995 p=4021989 u=root n=ansible | TASK [install_node : Print message] *******************************************************************************************************************************************
2024-05-21 09:17:37,014 p=4021989 u=root n=ansible | ok: [localhost] => {
    "msg": "Intel SGX is already enabled on this system"
}
2024-05-21 09:17:37,026 p=4021989 u=root n=ansible | TASK [install_node : SGX check reboot] ****************************************************************************************************************************************
2024-05-21 09:17:37,038 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:17:37,051 p=4021989 u=root n=ansible | TASK [install_node : SGX reboot] **********************************************************************************************************************************************
2024-05-21 09:17:37,063 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:17:37,076 p=4021989 u=root n=ansible | TASK [install_node : SGX reboot] **********************************************************************************************************************************************
2024-05-21 09:17:37,089 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:17:37,102 p=4021989 u=root n=ansible | TASK [install_node : Run SGX test and get EPC size] ***************************************************************************************************************************
2024-05-21 09:17:37,308 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:17:37,321 p=4021989 u=root n=ansible | TASK [install_node : Print EPC size if available] *****************************************************************************************************************************
2024-05-21 09:17:37,365 p=4021989 u=root n=ansible | ok: [localhost] => {
    "msg": "EPC size is 128 M"
}
2024-05-21 09:17:37,379 p=4021989 u=root n=ansible | TASK [install_node : Check if EPC size is OK] *********************************************************************************************************************************
2024-05-21 09:17:37,407 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:17:37,420 p=4021989 u=root n=ansible | TASK [install_node : Determine SGX version support] ***************************************************************************************************************************
2024-05-21 09:17:37,615 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:17:37,628 p=4021989 u=root n=ansible | TASK [install_node : Print SGX version support] *******************************************************************************************************************************
2024-05-21 09:17:37,680 p=4021989 u=root n=ansible | ok: [localhost] => {
    "msg": "SGX version 1"
}
2024-05-21 09:17:37,692 p=4021989 u=root n=ansible | TASK [install_node : Check if VT-x is enabled] ********************************************************************************************************************************
2024-05-21 09:17:37,888 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:17:37,901 p=4021989 u=root n=ansible | TASK [install_node : Fail the playbook if VT-x is not enabled] ****************************************************************************************************************
2024-05-21 09:17:37,912 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:17:37,948 p=4021989 u=root n=ansible | TASK [install_node : Print VTx status] ****************************************************************************************************************************************
2024-05-21 09:17:37,974 p=4021989 u=root n=ansible | ok: [localhost] => {
    "msg": "VTx enabled"
}
2024-05-21 09:17:37,986 p=4021989 u=root n=ansible | TASK [install_node : Check if VT-d is enabled] ********************************************************************************************************************************
2024-05-21 09:17:38,177 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:17:38,192 p=4021989 u=root n=ansible | TASK [install_node : Print message if VT-d is not enabled] ********************************************************************************************************************
2024-05-21 09:17:38,212 p=4021989 u=root n=ansible | ok: [localhost] => {
    "msg": "Warning! VT-d is not enabled. Check BIOS settings."
}
2024-05-21 09:17:38,228 p=4021989 u=root n=ansible | TASK [install_node : apparmor - enable sgx support for libvirt qemu] **********************************************************************************************************
2024-05-21 09:17:38,718 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:17:38,731 p=4021989 u=root n=ansible | TASK [install_node : Check installed Vagrant plugins] *************************************************************************************************************************
2024-05-21 09:17:39,975 p=4021989 u=root n=ansible | ok: [localhost]
2024-05-21 09:17:39,987 p=4021989 u=root n=ansible | TASK [install_node : Print Vagrant plugins] ***********************************************************************************************************************************
2024-05-21 09:17:40,009 p=4021989 u=root n=ansible | ok: [localhost] => {
    "plugin_list_output.stdout_lines": [
        "fog-libvirt (0.9.0, global)",
        "  - Version Constraint: 0.9.0",
        "vagrant-libvirt (0.9.0, global)",
        "  - Version Constraint: 0.9.0",
        "vagrant-reload (0.0.1, global)",
        "  - Version Constraint: 0.0.1"
    ]
}
2024-05-21 09:17:40,021 p=4021989 u=root n=ansible | TASK [install_node : Repair Vagrant plugins] **********************************************************************************************************************************
2024-05-21 09:17:40,033 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:17:40,046 p=4021989 u=root n=ansible | TASK [install_node : Remove and reinstall Vagrant plugins] ********************************************************************************************************************
2024-05-21 09:17:40,057 p=4021989 u=root n=ansible | skipping: [localhost]
2024-05-21 09:17:40,070 p=4021989 u=root n=ansible | TASK [install_node : Install Vagrant plugins] *********************************************************************************************************************************
2024-05-21 09:17:40,100 p=4021989 u=root n=ansible | skipping: [localhost] => (item={'name': 'vagrant-libvirt', 'version': '0.9.0'}) 
2024-05-21 09:17:40,104 p=4021989 u=root n=ansible | skipping: [localhost] => (item={'name': 'vagrant-reload', 'version': '0.0.1'}) 
2024-05-21 09:17:40,107 p=4021989 u=root n=ansible | skipping: [localhost] => (item={'name': 'fog-libvirt', 'version': '0.9.0'}) 
2024-05-21 09:17:40,120 p=4021989 u=root n=ansible | TASK [install_node : vagrant - get VM name] ***********************************************************************************************************************************
2024-05-21 09:17:40,508 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:17:40,521 p=4021989 u=root n=ansible | TASK [install_node : vagrant - get VM name] ***********************************************************************************************************************************
2024-05-21 09:17:40,752 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:17:40,765 p=4021989 u=root n=ansible | TASK [install_node : vagrant - cleanup VM] ************************************************************************************************************************************
2024-05-21 09:17:41,027 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:17:41,043 p=4021989 u=root n=ansible | TASK [install_node : vagrant - cleanup VM] ************************************************************************************************************************************
2024-05-21 09:17:41,359 p=4021989 u=root n=ansible | changed: [localhost]
2024-05-21 09:17:41,376 p=4021989 u=root n=ansible | TASK [install_node : vagrant - cleanup VM] ************************************************************************************************************************************
2024-05-21 09:17:43,577 p=4021989 u=root n=ansible | fatal: [localhost]: FAILED! => {"changed": true, "cmd": "vagrant destroy -f && sleep 60", "delta": "0:00:01.907376", "end": "2024-05-21 09:17:43.558843", "msg": "non-zero return code", "rc": 1, "start": "2024-05-21 09:17:41.651467", "stderr": "Name `mvp-pox-node_etnyvm1` of domain about to create is already taken. Please try to run\n`vagrant up` command again.", "stderr_lines": ["Name `mvp-pox-node_etnyvm1` of domain about to create is already taken. Please try to run", "`vagrant up` command again."], "stdout": "", "stdout_lines": []}
2024-05-21 09:17:43,580 p=4021989 u=root n=ansible | PLAY RECAP ********************************************************************************************************************************************************************
2024-05-21 09:17:43,581 p=4021989 u=root n=ansible | localhost                  : ok=56   changed=15   unreachable=0    failed=1    skipped=29   rescued=0    ignored=0   
2024-05-21 09:20:08,459 p=4033548 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 09:20:08,481 p=4033548 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 09:20:09,734 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:09,742 p=4033548 u=root n=ansible | TASK [Сheck config file] ******************************************************************************************************************************************************
2024-05-21 09:20:10,062 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:10,071 p=4033548 u=root n=ansible | TASK [Config file does not exist] *********************************************************************************************************************************************
2024-05-21 09:20:10,092 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,101 p=4033548 u=root n=ansible | TASK [meta] *******************************************************************************************************************************************************************
2024-05-21 09:20:10,113 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,127 p=4033548 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:20:10,147 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,155 p=4033548 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:20:10,173 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,185 p=4033548 u=root n=ansible | TASK [generate_config_file : Write address to config file] ********************************************************************************************************************
2024-05-21 09:20:10,207 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,217 p=4033548 u=root n=ansible | TASK [generate_config_file : Write private key to config file] ****************************************************************************************************************
2024-05-21 09:20:10,241 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,248 p=4033548 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:20:10,264 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,272 p=4033548 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:20:10,284 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,293 p=4033548 u=root n=ansible | TASK [generate_config_file : Write result private key to config file] *********************************************************************************************************
2024-05-21 09:20:10,305 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,313 p=4033548 u=root n=ansible | TASK [generate_config_file : Write result address to config file] *************************************************************************************************************
2024-05-21 09:20:10,325 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,333 p=4033548 u=root n=ansible | TASK [generate_config_file : Write TASK_EXECUTION_PRICE to config file] *******************************************************************************************************
2024-05-21 09:20:10,346 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,354 p=4033548 u=root n=ansible | TASK [generate_config_file : Write NETWORK to config file] ********************************************************************************************************************
2024-05-21 09:20:10,366 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:10,383 p=4033548 u=root n=ansible | TASK [validate_config_file : Get config file] *********************************************************************************************************************************
2024-05-21 09:20:10,674 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:20:10,681 p=4033548 u=root n=ansible | TASK [validate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:20:10,726 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:10,735 p=4033548 u=root n=ansible | TASK [validate_config_file : Defining bloxberg gas balance request] ***********************************************************************************************************
2024-05-21 09:20:11,372 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:11,380 p=4033548 u=root n=ansible | TASK [validate_config_file : Defining polygon gas balance request] ************************************************************************************************************
2024-05-21 09:20:11,986 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:11,994 p=4033548 u=root n=ansible | TASK [validate_config_file : Defining mumbai gas balance request] *************************************************************************************************************
2024-05-21 09:20:12,490 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:12,499 p=4033548 u=root n=ansible | TASK [validate_config_file : Evaluate bloxberg gas balance message] ***********************************************************************************************************
2024-05-21 09:20:12,521 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x44dd26c2cc76c0"
    }
}
2024-05-21 09:20:12,534 p=4033548 u=root n=ansible | TASK [validate_config_file : Evaluate polygon gas balance message] ************************************************************************************************************
2024-05-21 09:20:12,556 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x2386f26fc10000"
    }
}
2024-05-21 09:20:12,568 p=4033548 u=root n=ansible | TASK [validate_config_file : Evaluate mumbai gas balance message] *************************************************************************************************************
2024-05-21 09:20:12,588 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x2c68af0bb140000"
    }
}
2024-05-21 09:20:12,604 p=4033548 u=root n=ansible | TASK [validate_config_file : Checking gas balance for AUTO] *******************************************************************************************************************
2024-05-21 09:20:12,644 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": [
        "Node ADDRESS balance: '0' BERG.",
        "Please get bergs on 0xe9872d8c79C158063360BE13d6b179519F836d2c from https://faucet.bloxberg.org/ and try again.",
        "OR",
        "Node ADDRESS balance: '0' MATIC.",
        "Please sent MATIC to 0xe9872d8c79C158063360BE13d6b179519F836d2c and try again."
    ]
}
2024-05-21 09:20:12,652 p=4033548 u=root n=ansible | TASK [validate_config_file : Checking gas balance for BLOXBERG] ***************************************************************************************************************
2024-05-21 09:20:12,669 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:12,678 p=4033548 u=root n=ansible | TASK [validate_config_file : Checking gas balance for TESTNET] ****************************************************************************************************************
2024-05-21 09:20:12,691 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:12,699 p=4033548 u=root n=ansible | TASK [validate_config_file : Checking gas balance for POLYGON] ****************************************************************************************************************
2024-05-21 09:20:12,717 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:12,725 p=4033548 u=root n=ansible | TASK [validate_config_file : Checking gas balance for MUMBAI] *****************************************************************************************************************
2024-05-21 09:20:12,747 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:12,764 p=4033548 u=root n=ansible | TASK [validate_config_file : meta] ********************************************************************************************************************************************
2024-05-21 09:20:12,776 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:12,790 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : include_vars] ******************************************************************************************************************************************
2024-05-21 09:20:12,811 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:12,824 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:20:12,837 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:12,849 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:20:12,861 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:12,871 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:20:12,889 p=4033548 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/uoi-io.libvirt/tasks/install.yml for localhost
2024-05-21 09:20:12,897 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : Installing libvirt packages] ***************************************************************************************************************************
2024-05-21 09:20:13,962 p=4033548 u=root n=ansible | ok: [localhost] => (item=libvirt-daemon-system)
2024-05-21 09:20:13,972 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : Enabling and starting libvirtd service] ****************************************************************************************************************
2024-05-21 09:20:14,624 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:20:14,634 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : meta] **************************************************************************************************************************************************
2024-05-21 09:20:14,642 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:20:14,666 p=4033548 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/uoi-io.libvirt/tasks/config.yml for localhost
2024-05-21 09:20:14,676 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : Configuring "/etc/libvirt/libvirtd.conf" file (libvirt)] ***********************************************************************************************
2024-05-21 09:20:15,032 p=4033548 u=root n=ansible | ok: [localhost] => (item={'option': 'listen_tls', 'value': 'listen_tls = 0'})
2024-05-21 09:20:15,216 p=4033548 u=root n=ansible | ok: [localhost] => (item={'option': 'listen_tcp', 'value': 'listen_tcp = 0'})
2024-05-21 09:20:15,226 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : Configuring "/etc/libvirt/qemu.conf" file (QEMU)] ******************************************************************************************************
2024-05-21 09:20:15,438 p=4033548 u=root n=ansible | ok: [localhost] => (item={'option': 'user', 'value': 'user = "+0"'})
2024-05-21 09:20:15,613 p=4033548 u=root n=ansible | ok: [localhost] => (item={'option': 'cgroup_device_acl', 'value': 'cgroup_device_acl = [ "/dev/null", "/dev/full", "/dev/zero", "/dev/random", "/dev/urandom", "/dev/ptmx", "/dev/kvm", "/dev/kqemu", "/dev/rtc", "/dev/hpet", "/dev/sgx_virt", "/dev/sgx_enclave", "/dev/sgx_provision", "/dev/sgx_vepc" ]'})
2024-05-21 09:20:15,623 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : Configuring "/etc/default/libvirtd" file (daemon)] *****************************************************************************************************
2024-05-21 09:20:15,818 p=4033548 u=root n=ansible | ok: [localhost] => (item={'option': 'libvirtd_opts', 'value': 'libvirtd_opts=""'})
2024-05-21 09:20:15,827 p=4033548 u=root n=ansible | TASK [uoi-io.libvirt : meta] **************************************************************************************************************************************************
2024-05-21 09:20:15,841 p=4033548 u=root n=ansible | TASK [install_node : Populate service facts] **********************************************************************************************************************************
2024-05-21 09:20:21,053 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:21,064 p=4033548 u=root n=ansible | TASK [install_node : update apt cache] ****************************************************************************************************************************************
2024-05-21 09:20:22,966 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:20:22,977 p=4033548 u=root n=ansible | TASK [install_node : include_tasks] *******************************************************************************************************************************************
2024-05-21 09:20:23,023 p=4033548 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/install_node/tasks/debian_20.yml for localhost
2024-05-21 09:20:23,037 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | kernel SGX] *******************************************************************************************************************************
2024-05-21 09:20:23,050 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:23,062 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | reboot] ***********************************************************************************************************************************
2024-05-21 09:20:23,074 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:23,087 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | reboot] ***********************************************************************************************************************************
2024-05-21 09:20:23,099 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:23,110 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | exit] *************************************************************************************************************************************
2024-05-21 09:20:23,122 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:20:23,133 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu repo] ********************************************************************************************************************************
2024-05-21 09:20:23,649 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:23,661 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu packages] ****************************************************************************************************************************
2024-05-21 09:20:36,199 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:20:36,211 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant add key] **************************************************************************************************************************
2024-05-21 09:20:36,929 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:36,941 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant repo] *****************************************************************************************************************************
2024-05-21 09:20:37,310 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:37,322 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant install] **************************************************************************************************************************
2024-05-21 09:20:38,267 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:38,280 p=4033548 u=root n=ansible | TASK [install_node : Remove old qemu] *****************************************************************************************************************************************
2024-05-21 09:20:43,202 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:20:43,214 p=4033548 u=root n=ansible | TASK [install_node : Remove unused packages] **********************************************************************************************************************************
2024-05-21 09:20:50,612 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:20:50,623 p=4033548 u=root n=ansible | TASK [install_node : Refresh packages] ****************************************************************************************************************************************
2024-05-21 09:20:52,960 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:52,972 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu repo] ********************************************************************************************************************************
2024-05-21 09:20:53,353 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:20:53,364 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu SGX] *********************************************************************************************************************************
2024-05-21 09:20:56,606 p=4033548 u=root n=ansible | changed: [localhost] => (item=qemu-system-data=1:6.2+dfsg-2ubuntu8~20.04.sav0.etny)
2024-05-21 09:21:00,365 p=4033548 u=root n=ansible | changed: [localhost] => (item=qemu-utils=1:6.2+dfsg-2ubuntu8~20.04.sav0.etny)
2024-05-21 09:21:20,721 p=4033548 u=root n=ansible | changed: [localhost] => (item=qemu-system-common=1:6.2+dfsg-2ubuntu8~20.04.sav0.etny)
2024-05-21 09:21:25,823 p=4033548 u=root n=ansible | changed: [localhost] => (item=qemu-system-x86=1:6.2+dfsg-2ubuntu8~20.04.sav0.etny)
2024-05-21 09:21:25,837 p=4033548 u=root n=ansible | TASK [install_node : Installing qemu-utils] ***********************************************************************************************************************************
2024-05-21 09:21:26,716 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:26,729 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant-libvirt packages] *****************************************************************************************************************
2024-05-21 09:21:27,625 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:27,637 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant template] *************************************************************************************************************************
2024-05-21 09:21:28,106 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:28,118 p=4033548 u=root n=ansible | TASK [install_node : Check if isgx driver is installed] ***********************************************************************************************************************
2024-05-21 09:21:28,296 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:28,331 p=4033548 u=root n=ansible | TASK [install_node : Check if sgx_enclave driver is installed] ****************************************************************************************************************
2024-05-21 09:21:28,507 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:28,519 p=4033548 u=root n=ansible | TASK [install_node : Run script if both drivers are found] ********************************************************************************************************************
2024-05-21 09:21:28,537 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:28,549 p=4033548 u=root n=ansible | TASK [install_node : Run script if sgx_enclave drivers are not installed] *****************************************************************************************************
2024-05-21 09:21:28,560 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:28,573 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | enable_sgx dependencies] ******************************************************************************************************************
2024-05-21 09:21:29,477 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:29,490 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | build enable_sgx] *************************************************************************************************************************
2024-05-21 09:21:29,686 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:21:29,699 p=4033548 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | run enable_sgx] ***************************************************************************************************************************
2024-05-21 09:21:29,874 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:21:29,887 p=4033548 u=root n=ansible | TASK [install_node : Print message] *******************************************************************************************************************************************
2024-05-21 09:21:29,908 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": "Intel SGX is already enabled on this system"
}
2024-05-21 09:21:29,921 p=4033548 u=root n=ansible | TASK [install_node : SGX check reboot] ****************************************************************************************************************************************
2024-05-21 09:21:29,933 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:29,945 p=4033548 u=root n=ansible | TASK [install_node : SGX reboot] **********************************************************************************************************************************************
2024-05-21 09:21:29,957 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:29,969 p=4033548 u=root n=ansible | TASK [install_node : SGX reboot] **********************************************************************************************************************************************
2024-05-21 09:21:29,981 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:29,992 p=4033548 u=root n=ansible | TASK [install_node : Run SGX test and get EPC size] ***************************************************************************************************************************
2024-05-21 09:21:30,199 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:30,211 p=4033548 u=root n=ansible | TASK [install_node : Print EPC size if available] *****************************************************************************************************************************
2024-05-21 09:21:30,250 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": "EPC size is 128 M"
}
2024-05-21 09:21:30,268 p=4033548 u=root n=ansible | TASK [install_node : Check if EPC size is OK] *********************************************************************************************************************************
2024-05-21 09:21:30,297 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:30,311 p=4033548 u=root n=ansible | TASK [install_node : Determine SGX version support] ***************************************************************************************************************************
2024-05-21 09:21:30,503 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:30,515 p=4033548 u=root n=ansible | TASK [install_node : Print SGX version support] *******************************************************************************************************************************
2024-05-21 09:21:30,533 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": "SGX version 1"
}
2024-05-21 09:21:30,545 p=4033548 u=root n=ansible | TASK [install_node : Check if VT-x is enabled] ********************************************************************************************************************************
2024-05-21 09:21:30,744 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:21:30,756 p=4033548 u=root n=ansible | TASK [install_node : Fail the playbook if VT-x is not enabled] ****************************************************************************************************************
2024-05-21 09:21:30,767 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:30,781 p=4033548 u=root n=ansible | TASK [install_node : Print VTx status] ****************************************************************************************************************************************
2024-05-21 09:21:30,802 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": "VTx enabled"
}
2024-05-21 09:21:30,815 p=4033548 u=root n=ansible | TASK [install_node : Check if VT-d is enabled] ********************************************************************************************************************************
2024-05-21 09:21:30,996 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:21:31,008 p=4033548 u=root n=ansible | TASK [install_node : Print message if VT-d is not enabled] ********************************************************************************************************************
2024-05-21 09:21:31,028 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": "Warning! VT-d is not enabled. Check BIOS settings."
}
2024-05-21 09:21:31,041 p=4033548 u=root n=ansible | TASK [install_node : apparmor - enable sgx support for libvirt qemu] **********************************************************************************************************
2024-05-21 09:21:31,372 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:31,383 p=4033548 u=root n=ansible | TASK [install_node : Check installed Vagrant plugins] *************************************************************************************************************************
2024-05-21 09:21:32,240 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:21:32,255 p=4033548 u=root n=ansible | TASK [install_node : Print Vagrant plugins] ***********************************************************************************************************************************
2024-05-21 09:21:32,277 p=4033548 u=root n=ansible | ok: [localhost] => {
    "plugin_list_output.stdout_lines": [
        "fog-libvirt (0.9.0, global)",
        "  - Version Constraint: 0.9.0",
        "vagrant-libvirt (0.9.0, global)",
        "  - Version Constraint: 0.9.0",
        "vagrant-reload (0.0.1, global)",
        "  - Version Constraint: 0.0.1"
    ]
}
2024-05-21 09:21:32,291 p=4033548 u=root n=ansible | TASK [install_node : Repair Vagrant plugins] **********************************************************************************************************************************
2024-05-21 09:21:32,303 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:32,315 p=4033548 u=root n=ansible | TASK [install_node : Remove and reinstall Vagrant plugins] ********************************************************************************************************************
2024-05-21 09:21:32,327 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:32,339 p=4033548 u=root n=ansible | TASK [install_node : Install Vagrant plugins] *********************************************************************************************************************************
2024-05-21 09:21:32,370 p=4033548 u=root n=ansible | skipping: [localhost] => (item={'name': 'vagrant-libvirt', 'version': '0.9.0'}) 
2024-05-21 09:21:32,386 p=4033548 u=root n=ansible | skipping: [localhost] => (item={'name': 'vagrant-reload', 'version': '0.0.1'}) 
2024-05-21 09:21:32,424 p=4033548 u=root n=ansible | skipping: [localhost] => (item={'name': 'fog-libvirt', 'version': '0.9.0'}) 
2024-05-21 09:21:32,460 p=4033548 u=root n=ansible | TASK [install_node : vagrant - get VM name] ***********************************************************************************************************************************
2024-05-21 09:21:32,697 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:21:32,709 p=4033548 u=root n=ansible | TASK [install_node : vagrant - get VM name] ***********************************************************************************************************************************
2024-05-21 09:21:32,936 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:21:32,948 p=4033548 u=root n=ansible | TASK [install_node : vagrant - cleanup VM] ************************************************************************************************************************************
2024-05-21 09:21:32,965 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:32,977 p=4033548 u=root n=ansible | TASK [install_node : vagrant - cleanup VM] ************************************************************************************************************************************
2024-05-21 09:21:32,993 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:21:33,006 p=4033548 u=root n=ansible | TASK [install_node : vagrant - cleanup VM] ************************************************************************************************************************************
2024-05-21 09:22:34,616 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:22:34,629 p=4033548 u=root n=ansible | TASK [install_node : vagrant - provision VM] **********************************************************************************************************************************
2024-05-21 09:33:40,061 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:33:40,103 p=4033548 u=root n=ansible | TASK [install_node : startup - set etny-vagrant configuration] ****************************************************************************************************************
2024-05-21 09:33:40,468 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:33:40,484 p=4033548 u=root n=ansible | TASK [install_node : Copy vagrant dir to root] ********************************************************************************************************************************
2024-05-21 09:33:40,507 p=4033548 u=root n=ansible | skipping: [localhost]
2024-05-21 09:33:40,523 p=4033548 u=root n=ansible | TASK [install_node : startup - create etny-vagrant.service] *******************************************************************************************************************
2024-05-21 09:33:41,030 p=4033548 u=root n=ansible | ok: [localhost]
2024-05-21 09:33:41,042 p=4033548 u=root n=ansible | TASK [install_node : startup - enable etny-vagrant.service] *******************************************************************************************************************
2024-05-21 09:33:41,779 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:33:41,796 p=4033548 u=root n=ansible | TASK [install_node : startup - start etny-vagrant.service] ********************************************************************************************************************
2024-05-21 09:33:42,057 p=4033548 u=root n=ansible | changed: [localhost]
2024-05-21 09:33:42,077 p=4033548 u=root n=ansible | TASK [install_node : Finished] ************************************************************************************************************************************************
2024-05-21 09:33:42,099 p=4033548 u=root n=ansible | ok: [localhost] => {
    "msg": "Ethernity NODE installation finished"
}
2024-05-21 09:33:42,176 p=4033548 u=root n=ansible | PLAY RECAP ********************************************************************************************************************************************************************
2024-05-21 09:33:42,176 p=4033548 u=root n=ansible | localhost                  : ok=61   changed=18   unreachable=0    failed=0    skipped=32   rescued=0    ignored=0   
2024-05-21 09:44:39,962 p=4043134 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 09:44:39,986 p=4043134 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 09:44:41,367 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:41,376 p=4043134 u=root n=ansible | TASK [Сheck config file] ******************************************************************************************************************************************************
2024-05-21 09:44:41,736 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:41,745 p=4043134 u=root n=ansible | TASK [Config file does not exist] *********************************************************************************************************************************************
2024-05-21 09:44:41,766 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:41,776 p=4043134 u=root n=ansible | TASK [meta] *******************************************************************************************************************************************************************
2024-05-21 09:44:41,790 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:41,807 p=4043134 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:44:41,828 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:41,838 p=4043134 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:44:41,856 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:41,868 p=4043134 u=root n=ansible | TASK [generate_config_file : Write address to config file] ********************************************************************************************************************
2024-05-21 09:44:41,882 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:41,892 p=4043134 u=root n=ansible | TASK [generate_config_file : Write private key to config file] ****************************************************************************************************************
2024-05-21 09:44:41,909 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:41,919 p=4043134 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:44:41,934 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:41,944 p=4043134 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:44:41,959 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:41,970 p=4043134 u=root n=ansible | TASK [generate_config_file : Write result private key to config file] *********************************************************************************************************
2024-05-21 09:44:41,988 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:41,997 p=4043134 u=root n=ansible | TASK [generate_config_file : Write result address to config file] *************************************************************************************************************
2024-05-21 09:44:42,014 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:42,024 p=4043134 u=root n=ansible | TASK [generate_config_file : Write TASK_EXECUTION_PRICE to config file] *******************************************************************************************************
2024-05-21 09:44:42,038 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:42,048 p=4043134 u=root n=ansible | TASK [generate_config_file : Write NETWORK to config file] ********************************************************************************************************************
2024-05-21 09:44:42,069 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:42,086 p=4043134 u=root n=ansible | TASK [validate_config_file : Get config file] *********************************************************************************************************************************
2024-05-21 09:44:42,405 p=4043134 u=root n=ansible | changed: [localhost]
2024-05-21 09:44:42,415 p=4043134 u=root n=ansible | TASK [validate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:44:42,465 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:42,475 p=4043134 u=root n=ansible | TASK [validate_config_file : Defining bloxberg gas balance request] ***********************************************************************************************************
2024-05-21 09:44:43,159 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:43,167 p=4043134 u=root n=ansible | TASK [validate_config_file : Defining polygon gas balance request] ************************************************************************************************************
2024-05-21 09:44:43,733 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:43,742 p=4043134 u=root n=ansible | TASK [validate_config_file : Defining mumbai gas balance request] *************************************************************************************************************
2024-05-21 09:44:44,256 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:44,265 p=4043134 u=root n=ansible | TASK [validate_config_file : Evaluate bloxberg gas balance message] ***********************************************************************************************************
2024-05-21 09:44:44,285 p=4043134 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x44dd26c2cc76c0"
    }
}
2024-05-21 09:44:44,292 p=4043134 u=root n=ansible | TASK [validate_config_file : Evaluate polygon gas balance message] ************************************************************************************************************
2024-05-21 09:44:44,319 p=4043134 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x2386f26fc10000"
    }
}
2024-05-21 09:44:44,329 p=4043134 u=root n=ansible | TASK [validate_config_file : Evaluate mumbai gas balance message] *************************************************************************************************************
2024-05-21 09:44:44,353 p=4043134 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x2c68af0bb140000"
    }
}
2024-05-21 09:44:44,361 p=4043134 u=root n=ansible | TASK [validate_config_file : Checking gas balance for AUTO] *******************************************************************************************************************
2024-05-21 09:44:44,398 p=4043134 u=root n=ansible | ok: [localhost] => {
    "msg": [
        "Node ADDRESS balance: '0' BERG.",
        "Please get bergs on 0xe9872d8c79C158063360BE13d6b179519F836d2c from https://faucet.bloxberg.org/ and try again.",
        "OR",
        "Node ADDRESS balance: '0' MATIC.",
        "Please sent MATIC to 0xe9872d8c79C158063360BE13d6b179519F836d2c and try again."
    ]
}
2024-05-21 09:44:44,405 p=4043134 u=root n=ansible | TASK [validate_config_file : Checking gas balance for BLOXBERG] ***************************************************************************************************************
2024-05-21 09:44:44,427 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:44,439 p=4043134 u=root n=ansible | TASK [validate_config_file : Checking gas balance for TESTNET] ****************************************************************************************************************
2024-05-21 09:44:44,458 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:44,469 p=4043134 u=root n=ansible | TASK [validate_config_file : Checking gas balance for POLYGON] ****************************************************************************************************************
2024-05-21 09:44:44,486 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:44,497 p=4043134 u=root n=ansible | TASK [validate_config_file : Checking gas balance for MUMBAI] *****************************************************************************************************************
2024-05-21 09:44:44,517 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:44,528 p=4043134 u=root n=ansible | TASK [validate_config_file : meta] ********************************************************************************************************************************************
2024-05-21 09:44:44,540 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:44,554 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : include_vars] ******************************************************************************************************************************************
2024-05-21 09:44:44,580 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:44,596 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:44:44,619 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:44,635 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:44:44,660 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:44,670 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:44:44,699 p=4043134 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/uoi-io.libvirt/tasks/install.yml for localhost
2024-05-21 09:44:44,707 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : Installing libvirt packages] ***************************************************************************************************************************
2024-05-21 09:44:46,123 p=4043134 u=root n=ansible | ok: [localhost] => (item=libvirt-daemon-system)
2024-05-21 09:44:46,132 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : Enabling and starting libvirtd service] ****************************************************************************************************************
2024-05-21 09:44:46,711 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:46,723 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : meta] **************************************************************************************************************************************************
2024-05-21 09:44:46,730 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : include_tasks] *****************************************************************************************************************************************
2024-05-21 09:44:46,748 p=4043134 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/uoi-io.libvirt/tasks/config.yml for localhost
2024-05-21 09:44:46,757 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : Configuring "/etc/libvirt/libvirtd.conf" file (libvirt)] ***********************************************************************************************
2024-05-21 09:44:47,079 p=4043134 u=root n=ansible | ok: [localhost] => (item={'option': 'listen_tls', 'value': 'listen_tls = 0'})
2024-05-21 09:44:47,243 p=4043134 u=root n=ansible | ok: [localhost] => (item={'option': 'listen_tcp', 'value': 'listen_tcp = 0'})
2024-05-21 09:44:47,252 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : Configuring "/etc/libvirt/qemu.conf" file (QEMU)] ******************************************************************************************************
2024-05-21 09:44:47,450 p=4043134 u=root n=ansible | ok: [localhost] => (item={'option': 'user', 'value': 'user = "+0"'})
2024-05-21 09:44:47,618 p=4043134 u=root n=ansible | ok: [localhost] => (item={'option': 'cgroup_device_acl', 'value': 'cgroup_device_acl = [ "/dev/null", "/dev/full", "/dev/zero", "/dev/random", "/dev/urandom", "/dev/ptmx", "/dev/kvm", "/dev/kqemu", "/dev/rtc", "/dev/hpet", "/dev/sgx_virt", "/dev/sgx_enclave", "/dev/sgx_provision", "/dev/sgx_vepc" ]'})
2024-05-21 09:44:47,627 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : Configuring "/etc/default/libvirtd" file (daemon)] *****************************************************************************************************
2024-05-21 09:44:47,834 p=4043134 u=root n=ansible | ok: [localhost] => (item={'option': 'libvirtd_opts', 'value': 'libvirtd_opts=""'})
2024-05-21 09:44:47,843 p=4043134 u=root n=ansible | TASK [uoi-io.libvirt : meta] **************************************************************************************************************************************************
2024-05-21 09:44:47,856 p=4043134 u=root n=ansible | TASK [install_node : Populate service facts] **********************************************************************************************************************************
2024-05-21 09:44:52,929 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:52,940 p=4043134 u=root n=ansible | TASK [install_node : update apt cache] ****************************************************************************************************************************************
2024-05-21 09:44:57,783 p=4043134 u=root n=ansible | changed: [localhost]
2024-05-21 09:44:57,795 p=4043134 u=root n=ansible | TASK [install_node : include_tasks] *******************************************************************************************************************************************
2024-05-21 09:44:57,842 p=4043134 u=root n=ansible | included: /home/etny/mvp-pox-node/roles/install_node/tasks/debian_20.yml for localhost
2024-05-21 09:44:57,857 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | kernel SGX] *******************************************************************************************************************************
2024-05-21 09:44:57,868 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:57,880 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | reboot] ***********************************************************************************************************************************
2024-05-21 09:44:57,891 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:57,905 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | reboot] ***********************************************************************************************************************************
2024-05-21 09:44:57,916 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:57,930 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | exit] *************************************************************************************************************************************
2024-05-21 09:44:57,942 p=4043134 u=root n=ansible | skipping: [localhost]
2024-05-21 09:44:57,952 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu repo] ********************************************************************************************************************************
2024-05-21 09:44:58,477 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:44:58,488 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu packages] ****************************************************************************************************************************
2024-05-21 09:45:11,346 p=4043134 u=root n=ansible | changed: [localhost]
2024-05-21 09:45:11,358 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant add key] **************************************************************************************************************************
2024-05-21 09:45:12,065 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:45:12,078 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant repo] *****************************************************************************************************************************
2024-05-21 09:45:12,448 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:45:12,460 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | vagrant install] **************************************************************************************************************************
2024-05-21 09:45:13,351 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:45:13,363 p=4043134 u=root n=ansible | TASK [install_node : Remove old qemu] *****************************************************************************************************************************************
2024-05-21 09:45:18,257 p=4043134 u=root n=ansible | changed: [localhost]
2024-05-21 09:45:18,269 p=4043134 u=root n=ansible | TASK [install_node : Remove unused packages] **********************************************************************************************************************************
2024-05-21 09:45:25,838 p=4043134 u=root n=ansible | changed: [localhost]
2024-05-21 09:45:25,849 p=4043134 u=root n=ansible | TASK [install_node : Refresh packages] ****************************************************************************************************************************************
2024-05-21 09:45:28,165 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:45:28,177 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu repo] ********************************************************************************************************************************
2024-05-21 09:45:28,548 p=4043134 u=root n=ansible | ok: [localhost]
2024-05-21 09:45:28,561 p=4043134 u=root n=ansible | TASK [install_node : Ubuntu 20.04 | qemu SGX] *********************************************************************************************************************************
2024-05-21 09:45:30,113 p=4043134 u=root n=ansible |  [ERROR]: User interrupted execution

2024-05-21 09:46:55,848 p=4048486 u=root n=ansible | PLAY [Ethernity NODE] *********************************************************************************************************************************************************
2024-05-21 09:46:55,865 p=4048486 u=root n=ansible | TASK [Gathering Facts] ********************************************************************************************************************************************************
2024-05-21 09:46:57,126 p=4048486 u=root n=ansible | ok: [localhost]
2024-05-21 09:46:57,138 p=4048486 u=root n=ansible | TASK [Сheck config file] ******************************************************************************************************************************************************
2024-05-21 09:46:57,460 p=4048486 u=root n=ansible | ok: [localhost]
2024-05-21 09:46:57,468 p=4048486 u=root n=ansible | TASK [Config file does not exist] *********************************************************************************************************************************************
2024-05-21 09:46:57,490 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,505 p=4048486 u=root n=ansible | TASK [meta] *******************************************************************************************************************************************************************
2024-05-21 09:46:57,517 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,530 p=4048486 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:46:57,552 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,568 p=4048486 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:46:57,591 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,607 p=4048486 u=root n=ansible | TASK [generate_config_file : Write address to config file] ********************************************************************************************************************
2024-05-21 09:46:57,628 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,637 p=4048486 u=root n=ansible | TASK [generate_config_file : Write private key to config file] ****************************************************************************************************************
2024-05-21 09:46:57,659 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,666 p=4048486 u=root n=ansible | TASK [generate_config_file : Generate random values] **************************************************************************************************************************
2024-05-21 09:46:57,690 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,706 p=4048486 u=root n=ansible | TASK [generate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:46:57,724 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,738 p=4048486 u=root n=ansible | TASK [generate_config_file : Write result private key to config file] *********************************************************************************************************
2024-05-21 09:46:57,750 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,760 p=4048486 u=root n=ansible | TASK [generate_config_file : Write result address to config file] *************************************************************************************************************
2024-05-21 09:46:57,772 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,788 p=4048486 u=root n=ansible | TASK [generate_config_file : Write TASK_EXECUTION_PRICE to config file] *******************************************************************************************************
2024-05-21 09:46:57,808 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,820 p=4048486 u=root n=ansible | TASK [generate_config_file : Write NETWORK to config file] ********************************************************************************************************************
2024-05-21 09:46:57,832 p=4048486 u=root n=ansible | skipping: [localhost]
2024-05-21 09:46:57,854 p=4048486 u=root n=ansible | TASK [validate_config_file : Get config file] *********************************************************************************************************************************
2024-05-21 09:46:58,176 p=4048486 u=root n=ansible | changed: [localhost]
2024-05-21 09:46:58,186 p=4048486 u=root n=ansible | TASK [validate_config_file : Create map from string] **************************************************************************************************************************
2024-05-21 09:46:58,228 p=4048486 u=root n=ansible | ok: [localhost]
2024-05-21 09:46:58,240 p=4048486 u=root n=ansible | TASK [validate_config_file : Defining bloxberg gas balance request] ***********************************************************************************************************
2024-05-21 09:46:58,931 p=4048486 u=root n=ansible | ok: [localhost]
2024-05-21 09:46:58,941 p=4048486 u=root n=ansible | TASK [validate_config_file : Defining polygon gas balance request] ************************************************************************************************************
2024-05-21 09:46:59,600 p=4048486 u=root n=ansible | ok: [localhost]
2024-05-21 09:46:59,609 p=4048486 u=root n=ansible | TASK [validate_config_file : Defining mumbai gas balance request] *************************************************************************************************************
2024-05-21 09:47:00,118 p=4048486 u=root n=ansible | ok: [localhost]
2024-05-21 09:47:00,126 p=4048486 u=root n=ansible | TASK [validate_config_file : Evaluate bloxberg gas balance message] ***********************************************************************************************************
2024-05-21 09:47:00,150 p=4048486 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x0"
    }
}
2024-05-21 09:47:00,159 p=4048486 u=root n=ansible | TASK [validate_config_file : Evaluate polygon gas balance message] ************************************************************************************************************
2024-05-21 09:47:00,187 p=4048486 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x0"
    }
}
2024-05-21 09:47:00,198 p=4048486 u=root n=ansible | TASK [validate_config_file : Evaluate mumbai gas balance message] *************************************************************************************************************
2024-05-21 09:47:00,229 p=4048486 u=root n=ansible | ok: [localhost] => {
    "msg": {
        "id": 1,
        "jsonrpc": "2.0",
        "result": "0x0"
    }
}
2024-05-21 09:47:00,246 p=4048486 u=root n=ansible | TASK [validate_config_file : Checking gas balance for AUTO] *******************************************************************************************************************
2024-05-21 09:47:00,296 p=4048486 u=root n=ansible | fatal: [localhost]: FAILED! => {
    "msg": [
        "Node ADDRESS balance: '0' BERG.",
        "Please get bergs on 0xe9872d8c79C158063360BE13d6b179519F836d2d from https://faucet.bloxberg.org/ and try again.",
        "OR",
        "Node ADDRESS balance: '0' MATIC.",
        "Please sent MATIC to 0xe9872d8c79C158063360BE13d6b179519F836d2d and try again."
    ]
}
2024-05-21 09:47:00,299 p=4048486 u=root n=ansible | PLAY RECAP ********************************************************************************************************************************************************************
2024-05-21 09:47:00,299 p=4048486 u=root n=ansible | localhost                  : ok=10   changed=1    unreachable=0    failed=1    skipped=11   rescued=0    ignored=0   
